#ifndef GRAY_DETECTION_H__
#define GRAY_DETECTION_H__

#include "pca9555.h"

// ====================================================================
// ⭐ 关键配置：请在此处定义您使用的传感器数量 (3到12)
// ====================================================================
#define TRACK_SENSOR_COUNT 8 // <--- 修改这里，支持 3, 4, 5, 6, 7, 8, 9, 10, 11, 12

//#define USE_PCA9555 			  // PCA9555 IO扩展芯片循迹板
//#define USE_GW_GRAY 			  	// 感为传感器循迹板
//#define USE_GPIO						// IO口直接循迹
#define USE_CAM								// 使用视觉循迹

#ifdef USE_GW_GRAY

/* 默认地址 */
#define GW_GRAY_ADDR_DEF 0x4C

/* 开启开关数据模式 */
#define GW_GRAY_DIGITAL_MODE 0xDD

#endif

void gray_detection_init(void);
float gray_get_position(void);
float gray_get_position_22c_ti_contest(bool flag);
uint16_t gray_read_byte(void);

static inline bool is_separated_pattern(uint8_t sensor_pattern);

extern uint16_t gray_byte;

#ifdef USE_GPIO
typedef struct {
		GPIO_Regs* port;
		uint32_t pin;
} gpio_struct_t;
#endif

typedef struct
{
	uint16_t input; 
  float output;
} lookup_table_t;

static const lookup_table_t lookup_table[] = {

#if (TRACK_SENSOR_COUNT == 3) // ⭐ 3路传感器 (中心: 1)
    // 单个传感器
    {0x01, -1.0f}, // 0b001 (bit 0)
    {0x02, 0.0f},  // 0b010 (bit 1) ⭐ 中心
    {0x04, 1.0f},  // 0b100 (bit 2)
    // 两个传感器
    {0x03, -0.5f}, // 0b011 (bit 0,1)
    {0x06, 0.5f},  // 0b110 (bit 1,2)

#elif (TRACK_SENSOR_COUNT == 4) // ⭐ 4路传感器 (中心: 1.5)
    // 单个传感器
    {0x01, -1.5f}, // 0b0001 (bit 0)
    {0x02, -0.5f}, // 0b0010 (bit 1)
    {0x04, 0.5f},  // 0b0100 (bit 2)
    {0x08, 1.5f},  // 0b1000 (bit 3)
    // 两个传感器
    {0x03, -1.0f}, // 0b0011 (bit 0,1)
    {0x06, 0.0f},  // 0b0110 (bit 1,2) ⭐ 中心
    {0x0C, 1.0f},  // 0b1100 (bit 2,3)
    // 三个传感器
    {0x07, -0.5f}, // 0b0111 (bit 0,1,2)
    {0x0E, 0.5f},  // 0b1110 (bit 1,2,3)

#elif (TRACK_SENSOR_COUNT == 5) // ⭐ 5路传感器 (中心: 2)
    // 单个传感器
    {0x01, -2.0f}, // 0b00001 (bit 0)
    {0x02, -1.0f}, // 0b00010 (bit 1)
    {0x04, 0.0f},  // 0b00100 (bit 2) ⭐ 中心
    {0x08, 1.0f},  // 0b01000 (bit 3)
    {0x10, 2.0f},  // 0b10000 (bit 4)
    // 两个传感器
    {0x03, -1.5f}, // 0b00011 (bit 0,1)
    {0x06, -0.5f}, // 0b00110 (bit 1,2)
    {0x0C, 0.5f},  // 0b01100 (bit 2,3)
    {0x18, 1.5f},  // 0b11000 (bit 3,4)
    // 三个传感器
    {0x07, -1.0f}, // 0b00111 (bit 0,1,2)
    {0x0E, 0.0f},  // 0b01110 (bit 1,2,3) ⭐ 中心
    {0x1C, 1.0f},  // 0b11100 (bit 2,3,4)

#elif (TRACK_SENSOR_COUNT == 6) // ⭐ 6路传感器 (中心: 2.5)
    // 单个传感器
    {0x01, -2.5f}, // 0b000001 (bit 0)
    {0x02, -1.5f}, // 0b000010 (bit 1)
    {0x04, -0.5f}, // 0b000100 (bit 2)
    {0x08, 0.5f},  // 0b001000 (bit 3)
    {0x10, 1.5f},  // 0b010000 (bit 4)
    {0x20, 2.5f},  // 0b100000 (bit 5)
    // 两个传感器
    {0x03, -2.0f}, // 0b000011 (bit 0,1)
    {0x06, -1.0f}, // 0b000110 (bit 1,2)
    {0x0C, 0.0f},  // 0b001100 (bit 2,3) ⭐ 中心
    {0x18, 1.0f},  // 0b011000 (bit 3,4)
    {0x30, 2.0f},  // 0b110000 (bit 4,5)
    // 三个传感器
    {0x07, -1.5f}, // 0b000111 (bit 0,1,2)
    {0x0E, -0.5f}, // 0b001110 (bit 1,2,3)
    {0x1C, 0.5f},  // 0b011100 (bit 2,3,4)
    {0x38, 1.5f},  // 0b111000 (bit 3,4,5)

#elif (TRACK_SENSOR_COUNT == 7) // ⭐ 7路传感器 (中心: 3)
    // 单个传感器
    {0x01, -3.0f}, // 0b0000001 (bit 0)
    {0x02, -2.0f}, // 0b0000010 (bit 1)
    {0x04, -1.0f}, // 0b0000100 (bit 2)
    {0x08, 0.0f},  // 0b0001000 (bit 3) ⭐ 中心
    {0x10, 1.0f},  // 0b0010000 (bit 4)
    {0x20, 2.0f},  // 0b0100000 (bit 5)
    {0x40, 3.0f},  // 0b1000000 (bit 6)
    // 两个传感器
    {0x03, -2.5f}, // 0b0000011 (bit 0,1)
    {0x06, -1.5f}, // 0b0000110 (bit 1,2)
    {0x0C, -0.5f}, // 0b0001100 (bit 2,3)
    {0x18, 0.5f},  // 0b0011000 (bit 3,4)
    {0x30, 1.5f},  // 0b0110000 (bit 4,5)
    {0x60, 2.5f},  // 0b1100000 (bit 5,6)
    // 三个传感器
    {0x07, -2.0f}, // 0b0000111 (bit 0,1,2)
    {0x0E, -1.0f}, // 0b0001110 (bit 1,2,3)
    {0x1C, 0.0f},  // 0b0011100 (bit 2,3,4) ⭐ 中心
    {0x38, 1.0f},  // 0b0111000 (bit 3,4,5)
    {0x70, 2.0f},  // 0b1110000 (bit 4,5,6)

#elif (TRACK_SENSOR_COUNT == 8) // ⭐ 8路传感器 (中心: 3.5)
    {0x01, -3.5},   // 00000001b (bit 0) - 最左端
    {0x02, -2.5},   // 00000010b (bit 1)
    {0x04, -1.5},   // 00000100b (bit 2)
    {0x08, -0.5},   // 00001000b (bit 3)
    {0x10,  0.0},   // 00010000b (bit 4) ⭐ 中心
    {0x20,  0.5},   // 00100000b (bit 5)
    {0x40,  1.5},   // 01000000b (bit 6)
    {0x80,  2.5},   // 10000000b (bit 7) - 最右端
    // ⭐ 两个相邻传感器检测 - 中心为传感器4,5
    {0x03, -3.0},   // 00000011b (bit 0,1)
    {0x06, -2.0},   // 00000110b (bit 1,2)
    {0x0C, -1.0},   // 00001100b (bit 2,3)
    {0x18,  0.0},   // 00011000b (bit 3,4) ⭐ 双线中心
    {0x30,  1.0},   // 00110000b (bit 4,5)
    {0x60,  2.0},   // 01100000b (bit 5,6)
    {0xC0,  3.0},   // 11000000b (bit 6,7)
    // 三个相邻传感器检测（宽线条）
    {0x07, -2.5},   // 00000111b (bit 0,1,2) - 最左端三个
    {0x0E, -1.5},   // 00001110b (bit 1,2,3)
    {0x1C, -0.5},   // 00011100b (bit 2,3,4) - 左偏中心
    {0x38,  0.5},   // 00111000b (bit 3,4,5) - 右偏中心
    {0x70,  1.5},   // 01110000b (bit 4,5,6)
    {0xE0,  2.5},   // 11100000b (bit 5,6,7) - 最右端三个
    // 四个相邻传感器（非常宽的线条）
    {0x0F, -2.0},   // 00001111b (bit 0,1,2,3) - 最左端四个
    {0x1E, -1.0},   // 00011110b (bit 1,2,3,4) - 左偏超宽
    {0x3C,  0.0},   // 00111100b (bit 2,3,4,5) ⭐ 中心
    {0x78,  1.0},   // 01111000b (bit 3,4,5,6) - 右偏超宽
    {0xF0,  2.0},   // 11110000b (bit 4,5,6,7) - 最右端四个
		
#elif (TRACK_SENSOR_COUNT == 9) // ⭐ 9路传感器 (中心: 4)
    // 单个传感器
    {0x001, -4.0f}, // 0b000000001 (bit 0)
    {0x002, -3.0f}, // 0b000000010 (bit 1)
    {0x004, -2.0f}, // 0b000000100 (bit 2)
    {0x008, -1.0f}, // 0b000001000 (bit 3)
    {0x010, 0.0f},  // 0b000010000 (bit 4) ⭐ 中心
    {0x020, 1.0f},  // 0b000100000 (bit 5)
    {0x040, 2.0f},  // 0b001000000 (bit 6)
    {0x080, 3.0f},  // 0b010000000 (bit 7)
    {0x100, 4.0f},  // 0b100000000 (bit 8)
    // 两个传感器
    {0x003, -3.5f}, // 0b000000011 (bit 0,1)
    {0x006, -2.5f}, // 0b000000110 (bit 1,2)
    {0x00C, -1.5f}, // 0b000001100 (bit 2,3)
    {0x018, -0.5f}, // 0b000011000 (bit 3,4)
    {0x030, 0.5f},  // 0b000110000 (bit 4,5)
    {0x060, 1.5f},  // 0b001100000 (bit 5,6)
    {0x0C0, 2.5f},  // 0b011000000 (bit 6,7)
    {0x180, 3.5f},  // 0b110000000 (bit 7,8)
    // 三个传感器
    {0x007, -3.0f}, // 0b000000111 (bit 0,1,2)
    {0x00E, -2.0f}, // 0b000001110 (bit 1,2,3)
    {0x01C, -1.0f}, // 0b000011100 (bit 2,3,4)
    {0x038, 0.0f},  // 0b000111000 (bit 3,4,5) ⭐ 中心
    {0x070, 1.0f},  // 0b001110000 (bit 4,5,6)
    {0x0E0, 2.0f},  // 0b011100000 (bit 5,6,7)
    {0x1C0, 3.0f},  // 0b111000000 (bit 6,7,8)

#elif (TRACK_SENSOR_COUNT == 10) // ⭐ 10路传感器 (中心: 4.5)
    // 单个传感器
    {0x001, -4.5f}, // 0b0000000001 (bit 0)
    {0x002, -3.5f}, // 0b0000000010 (bit 1)
    {0x004, -2.5f}, // 0b0000000100 (bit 2)
    {0x008, -1.5f}, // 0b0000001000 (bit 3)
    {0x010, -0.5f}, // 0b0000010000 (bit 4)
    {0x020, 0.5f},  // 0b0000100000 (bit 5)
    {0x040, 1.5f},  // 0b0001000000 (bit 6)
    {0x080, 2.5f},  // 0b0010000000 (bit 7)
    {0x100, 3.5f},  // 0b0100000000 (bit 8)
    {0x200, 4.5f},  // 0b1000000000 (bit 9)
    // 两个传感器
    {0x003, -4.0f}, // 0b0000000011 (bit 0,1)
    {0x006, -3.0f}, // 0b0000000110 (bit 1,2)
    {0x00C, -2.0f}, // 0b0000001100 (bit 2,3)
    {0x018, -1.0f}, // 0b0000011000 (bit 3,4)
    {0x030, 0.0f},  // 0b0000110000 (bit 4,5) ⭐ 中心
    {0x060, 1.0f},  // 0b0001100000 (bit 5,6)
    {0x0C0, 2.0f},  // 0b0011000000 (bit 6,7)
    {0x180, 3.0f},  // 0b0110000000 (bit 7,8)
    {0x300, 4.0f},  // 0b1100000000 (bit 8,9)
    // 三个传感器
    {0x007, -3.5f}, // 0b0000000111 (bit 0,1,2)
    {0x00E, -2.5f}, // 0b0000001110 (bit 1,2,3)
    {0x01C, -1.5f}, // 0b0000011100 (bit 2,3,4)
    {0x038, -0.5f}, // 0b0000111000 (bit 3,4,5)
    {0x070, 0.5f},  // 0b0001110000 (bit 4,5,6)
    {0x0E0, 1.5f},  // 0b0011100000 (bit 5,6,7)
    {0x1C0, 2.5f},  // 0b0111000000 (bit 6,7,8)
    {0x380, 3.5f},  // 0b1110000000 (bit 7,8,9)

#elif (TRACK_SENSOR_COUNT == 11) // ⭐ 11路传感器 (中心: 5)
    // 单个传感器
    {0x001, -5.0f}, // 0b00000000001 (bit 0)
    {0x002, -4.0f}, // 0b00000000010 (bit 1)
    {0x004, -3.0f}, // 0b00000000100 (bit 2)
    {0x008, -2.0f}, // 0b00000001000 (bit 3)
    {0x010, -1.0f}, // 0b00000010000 (bit 4)
    {0x020, 0.0f},  // 0b00000100000 (bit 5) ⭐ 中心
    {0x040, 1.0f},  // 0b00001000000 (bit 6)
    {0x080, 2.0f},  // 0b00010000000 (bit 7)
    {0x100, 3.0f},  // 0b00100000000 (bit 8)
    {0x200, 4.0f},  // 0b01000000000 (bit 9)
    {0x400, 5.0f},  // 0b10000000000 (bit 10)
    // 两个传感器
    {0x003, -4.5f}, // 0b00000000011 (bit 0,1)
    {0x006, -3.5f}, // 0b00000000110 (bit 1,2)
    {0x00C, -2.5f}, // 0b00000001100 (bit 2,3)
    {0x018, -1.5f}, // 0b00000011000 (bit 3,4)
    {0x030, -0.5f}, // 0b00000110000 (bit 4,5)
    {0x060, 0.5f},  // 0b00001100000 (bit 5,6)
    {0x0C0, 1.5f},  // 0b00011000000 (bit 6,7)
    {0x180, 2.5f},  // 0b00110000000 (bit 7,8)
    {0x300, 3.5f},  // 0b01100000000 (bit 8,9)
    {0x600, 4.5f},  // 0b11000000000 (bit 9,10)
    // 三个传感器
    {0x007, -4.0f}, // 0b00000000111 (bit 0,1,2)
    {0x00E, -3.0f}, // 0b00000001110 (bit 1,2,3)
    {0x01C, -2.0f}, // 0b00000011100 (bit 2,3,4)
    {0x038, -1.0f}, // 0b00000111000 (bit 3,4,5)
    {0x070, 0.0f},  // 0b00001110000 (bit 4,5,6) ⭐ 中心
    {0x0E0, 1.0f},  // 0b00011100000 (bit 5,6,7)
    {0x1C0, 2.0f},  // 0b00111000000 (bit 6,7,8)
    {0x380, 3.0f},  // 0b01110000000 (bit 7,8,9)
    {0x700, 4.0f},  // 0b11100000000 (bit 8,9,10)

#elif (TRACK_SENSOR_COUNT == 12) // ⭐ 12路传感器 (中心: 5.5) - 与您的逻辑类似
    // 单个传感器
    {0x001, -5.5f}, // 0b000000000001 (bit 0)
    {0x002, -4.5f}, // 0b000000000010 (bit 1)
    {0x004, -3.5f}, // 0b000000000100 (bit 2)
    {0x008, -2.5f}, // 0b000000001000 (bit 3)
    {0x010, -1.5f}, // 0b000000010000 (bit 4)
    {0x020, -0.5f}, // 0b000000100000 (bit 5)
    {0x040, 0.5f},  // 0b000001000000 (bit 6)
    {0x080, 1.5f},  // 0b000010000000 (bit 7)
    {0x100, 2.5f},  // 0b000100000000 (bit 8)
    {0x200, 3.5f},  // 0b001000000000 (bit 9)
    {0x400, 4.5f},  // 0b010000000000 (bit 10)
    {0x800, 5.5f},  // 0b100000000000 (bit 11)
    // 两个传感器
    {0x003, -5.0f}, // 0b000000000011 (bit 0,1)
    {0x006, -4.0f}, // 0b000000000110 (bit 1,2)
    {0x00C, -3.0f}, // 0b000000001100 (bit 2,3)
    {0x018, -2.0f}, // 0b000000011000 (bit 3,4)
    {0x030, -1.0f}, // 0b000000110000 (bit 4,5)
    {0x060, 0.0f},  // 0b000001100000 (bit 5,6) ⭐ 中心
    {0x0C0, 1.0f},  // 0b000011000000 (bit 6,7)
    {0x180, 2.0f},  // 0b000110000000 (bit 7,8)
    {0x300, 3.0f},  // 0b001100000000 (bit 8,9)
    {0x600, 4.0f},  // 0b011000000000 (bit 9,10)
    {0xC00, 5.0f},  // 0b110000000000 (bit 10,11)
    // 三个传感器
    {0x007, -4.5f}, // 0b000000000111 (bit 0,1,2)
    {0x00E, -3.5f}, // 0b000000001110 (bit 1,2,3)
    {0x01C, -2.5f}, // 0b000000011100 (bit 2,3,4)
    {0x038, -1.5f}, // 0b000000111000 (bit 3,4,5)
    {0x070, -0.5f}, // 0b000001110000 (bit 4,5,6)
    {0x0E0, 0.5f},  // 0b000011100000 (bit 5,6,7)
    {0x1C0, 1.5f},  // 0b000111000000 (bit 6,7,8)
    {0x380, 2.5f},  // 0b001110000000 (bit 7,8,9)
    {0x700, 3.5f},  // 0b011100000000 (bit 8,9,10)
    {0xE00, 4.5f}  // 0b111000000000 (bit 9,10,11)
#else
#error "TRACK_SENSOR_COUNT must be between 3 and 12."
#endif
};

// 分离点模式表 - 用于检测非连续传感器信号并统一处理为无误差
static const uint8_t separated_pattern_table_8bit[] = {
    // ===== 对称分离点（间隔1个传感器） =====
    0x05,   // 00000101b (bit 0,2) - 左右对称
    0x0A,   // 00001010b (bit 1,3) - 左右对称
    0x14,   // 00010100b (bit 2,4) - 左右对称
    0x28,   // 00101000b (bit 3,5) - 左右对称
    0x50,   // 01010000b (bit 4,6) - 左右对称
    0xA0,   // 10100000b (bit 5,7) - 左右对称
    
    // ===== 对称分离点（间隔2个传感器） =====
    0x09,   // 00001001b (bit 0,3) - 左右对称
    0x12,   // 00010010b (bit 1,4) - 左右对称
    0x24,   // 00100100b (bit 2,5) - 左右对称
    0x48,   // 01001000b (bit 3,6) - 左右对称
    0x90,   // 10010000b (bit 4,7) - 左右对称
    
    // ===== 对称分离点（间隔3个传感器） =====
    0x11,   // 00010001b (bit 0,4) - 左右对称
    0x22,   // 00100010b (bit 1,5) - 左右对称
    0x44,   // 01000100b (bit 2,6) - 左右对称
    0x88,   // 10001000b (bit 3,7) - 左右对称
    
    // ===== 最远端分离点 =====
    0x41,   // 01000001b (bit 0,6) - 最左最右
    0x82,   // 10000010b (bit 1,7) - 次左次右
    
    // ===== 三点分离（中心+两端） =====
    0x15,   // 00010101b (bit 0,2,4) - 对称三点
    0x2A,   // 00101010b (bit 1,3,5) - 对称三点
    0x54,   // 01010100b (bit 2,4,6) - 对称三点
    0xA8,   // 10101000b (bit 3,5,7) - 对称三点
    
    // ===== 补充：更多三点分离组合 =====
    0x45,   // 01000101b (bit 0,2,6) - 左中远右
    0x8A,   // 10001010b (bit 1,3,7) - 左中远右
    0x51,   // 01010001b (bit 0,4,6) - 左远中右
    0xA2,   // 10100010b (bit 1,5,7) - 左远中右
    0x89,   // 10001001b (bit 0,3,7) - 左中远右
    0x91,   // 10010001b (bit 0,4,7) - 左中远右
    0x49,   // 01001001b (bit 0,3,6) - 左中远右
    
    // ===== 四点分离（棋盘模式） =====
    0x55,   // 01010101b (bit 0,2,4,6) - 棋盘模式
    0xAA,   // 10101010b (bit 1,3,5,7) - 棋盘模式
    
    // ===== 补充：其他四点分离组合 =====
    0x99,   // 10011001b (bit 0,3,4,7) - 内外对称
    0x69,   // 01101001b (bit 0,3,5,6) - 混合四点
    0x96,   // 10010110b (bit 1,2,4,7) - 混合四点
    0x65,   // 01100101b (bit 0,2,5,6) - 混合四点
    0xA5,   // 10100101b (bit 0,2,5,7) - 混合四点
    0x59,   // 01011001b (bit 0,3,4,6) - 混合四点
    0x95,   // 10010101b (bit 0,2,4,7) - 混合四点
    0x56,   // 01010110b (bit 1,2,4,6) - 混合四点
    0xA9,   // 10101001b (bit 0,3,5,7) - 混合四点
    
    // ===== 五点分离组合 =====
    0x75,   // 01110101b (bit 0,2,4,5,6) - 五点分离
    0xAB,   // 10101011b (bit 0,1,3,5,7) - 五点分离
    0xD5,   // 11010101b (bit 0,2,4,6,7) - 五点分离
    0x5D,   // 01011101b (bit 0,2,3,4,6) - 五点分离
    0xB5,   // 10110101b (bit 0,2,4,5,7) - 五点分离
    0x57,   // 01010111b (bit 0,1,2,4,6) - 五点分离
    0xAD,   // 10101101b (bit 0,2,3,5,7) - 五点分离
    0x5B,   // 01011011b (bit 0,1,3,4,6) - 五点分离
    
    // ===== 六点分离组合 =====
    0xB7,   // 10110111b (bit 0,1,2,4,5,7) - 六点分离
    0xDD,   // 11011101b (bit 0,2,3,4,6,7) - 六点分离
    0x77,   // 01110111b (bit 0,1,2,4,5,6) - 六点分离
    0xBB,   // 10111011b (bit 0,1,3,4,5,7) - 六点分离
    0xED,   // 11101101b (bit 0,2,3,5,6,7) - 六点分离
    0xD7,   // 11010111b (bit 0,1,2,4,6,7) - 六点分离
    0x7B,   // 01111011b (bit 0,1,3,4,5,6) - 六点分离
    
    // ===== 连续+分离点组合 =====
    // 连续2个 + 1个分离
    0x13,   // 00010011b (bit 0,1,4) - 左连续+右分离
    0x26,   // 00100110b (bit 1,2,5) - 左连续+右分离
    0x4C,   // 01001100b (bit 2,3,6) - 左连续+右分离
    0x98,   // 10011000b (bit 3,4,7) - 左连续+右分离
    0x31,   // 00110001b (bit 0,4,5) - 左分离+右连续
    0x62,   // 01100010b (bit 1,5,6) - 左分离+右连续
    0xC4,   // 11000100b (bit 2,6,7) - 左分离+右连续
    
    // ===== 补充：更多连续2个+分离组合 =====
    0x19,   // 00011001b (bit 0,3,4) - 左分离+右连续
    0x32,   // 00110010b (bit 1,4,5) - 左分离+右连续
    0x64,   // 01100100b (bit 2,5,6) - 左分离+右连续
    0xC8,   // 11001000b (bit 3,6,7) - 左分离+右连续
    
    // 连续3个 + 1个分离
    0x17,   // 00010111b (bit 0,1,2,4) - 左连续+右分离
    0x2E,   // 00101110b (bit 1,2,3,5) - 左连续+右分离
    0x5C,   // 01011100b (bit 2,3,4,6) - 左连续+右分离
    0xB8,   // 10111000b (bit 3,4,5,7) - 左连续+右分离
    0x71,   // 01110001b (bit 0,4,5,6) - 左分离+右连续
    0xE2,   // 11100010b (bit 1,5,6,7) - 左分离+右连续
    0xD0,   // 11010000b (bit 4,6,7) - 中连续+右分离
    0x0D,   // 00001101b (bit 0,2,3) - 左分离+右连续
    
    // ===== 补充：更多连续3个+分离组合 =====
    0x8E,   // 10001110b (bit 1,2,3,7) - 左连续+右分离
    0x1D,   // 00011101b (bit 0,2,3,4) - 左连续+右分离
    0x3A,   // 00111010b (bit 1,3,4,5) - 左连续+右分离
    0x74,   // 01110100b (bit 2,4,5,6) - 左连续+右分离
    0xE8,   // 11101000b (bit 3,5,6,7) - 左连续+右分离
    
    // 连续4个 + 1个分离
    0x8F,   // 10001111b (bit 0,1,2,3,7) - 左连续+右分离
    0xF1,   // 11110001b (bit 0,4,5,6,7) - 左分离+右连续
    
    // ===== 补充：更多连续4个+分离组合 =====
    0x1E,   // 00011110b (bit 1,2,3,4) - 中间连续4个
    0x3C,   // 00111100b (bit 2,3,4,5) - 中间连续4个
    0x78,   // 01111000b (bit 3,4,5,6) - 中间连续4个
    0xF0,   // 11110000b (bit 4,5,6,7) - 右侧连续4个
    
    // 连续2个 + 连续2个分离
    0x33,   // 00110011b (bit 0,1,4,5) - 双连续组合
    0x66,   // 01100110b (bit 1,2,5,6) - 双连续组合
    0xCC,   // 11001100b (bit 2,3,6,7) - 双连续组合
    
    // ===== 补充：更多双连续组合 =====
    0x99,   // 10011001b (bit 0,3,4,7) - 双连续组合（已有，注释不同）
    0x9C,   // 10011100b (bit 2,3,4,7) - 双连续组合
    0x39,   // 00111001b (bit 0,3,4,5) - 双连续组合
    0x72,   // 01110010b (bit 1,4,5,6) - 双连续组合
    0xE4,   // 11100100b (bit 2,5,6,7) - 双连续组合
    0xC9,   // 11001001b (bit 0,3,6,7) - 双连续组合
    0x93,   // 10010011b (bit 0,1,4,7) - 双连续组合
    
    // ===== 其他复杂分离组合 =====
    0x35,   // 00110101b (bit 0,2,4,5) - 混合分离
    0x6A,   // 01101010b (bit 1,3,5,6) - 混合分离
    0xD4,   // 11010100b (bit 2,4,6,7) - 混合分离
    0x53,   // 01010011b (bit 0,1,4,6) - 混合分离
    0xA6,   // 10100110b (bit 1,2,5,7) - 混合分离
    0x4D,   // 01001101b (bit 0,2,3,6) - 混合分离
    0x9A,   // 10011010b (bit 1,3,4,7) - 混合分离
    
    // ===== 补充：更多复杂分离组合 =====
    0x4B,   // 01001011b (bit 0,1,3,6) - 混合分离
    0x92,   // 10010010b (bit 1,4,7) - 三点分离
    0x29,   // 00101001b (bit 0,3,5) - 三点分离
    0x52,   // 01010010b (bit 1,4,6) - 三点分离
    0xA4,   // 10100100b (bit 2,5,7) - 三点分离
    0x4A,   // 01001010b (bit 1,3,6) - 三点分离
    0x94,   // 10010100b (bit 2,4,7) - 三点分离
    0x25,   // 00100101b (bit 0,2,5) - 三点分离
    0x58,   // 01011000b (bit 3,4,6) - 三点分离
    0xB0,   // 10110000b (bit 4,5,7) - 三点分离
    0x61,   // 01100001b (bit 0,5,6) - 三点分离
    0xC2,   // 11000010b (bit 1,6,7) - 三点分离
    0x85,   // 10000101b (bit 0,2,7) - 三点分离
    0x0B,   // 00001011b (bit 0,1,3) - 三点分离
    0x16,   // 00010110b (bit 1,2,4) - 三点分离
    0x2C,   // 00101100b (bit 2,3,5) - 三点分离
    0x58,   // 01011000b (bit 3,4,6) - 三点分离（重复，已注释不同）
    0xB0,   // 10110000b (bit 4,5,7) - 三点分离（重复，已注释不同）
    
    // ===== 极端情况（全检测和几乎全检测） =====
    0x7F,   // 01111111b (bit 0,1,2,3,4,5,6) - 7个传感器
    0xFE,   // 11111110b (bit 1,2,3,4,5,6,7) - 7个传感器
    0xBF,   // 10111111b (bit 0,1,2,3,4,5,7) - 7个传感器（缺bit 6）
    0xDF,   // 11011111b (bit 0,1,2,3,4,6,7) - 7个传感器（缺bit 5）
    0xEF,   // 11101111b (bit 0,1,2,3,5,6,7) - 7个传感器（缺bit 4）
    0xF7,   // 11110111b (bit 0,1,2,4,5,6,7) - 7个传感器（缺bit 3）
    0xFB,   // 11111011b (bit 0,1,3,4,5,6,7) - 7个传感器（缺bit 2）
    0xFD,   // 11111101b (bit 0,2,3,4,5,6,7) - 7个传感器（缺bit 1）
};

#endif

		
		